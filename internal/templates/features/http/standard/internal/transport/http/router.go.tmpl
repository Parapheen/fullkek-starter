package http

import (
    "fmt"
    "net/http"
    "path/filepath"
{{- if .Stack.HasFeature "frontend-htmx" }}
    "sync/atomic"
{{- end }}
{{- if .Stack.HasFeature "auth-github-oauth2" }}
    "html"
    "strings"

    appauth "{{ .ModulePath }}/internal/app/auth"
    {{- end }}
)

var indexPage = filepath.Join("web", "templates", "pages", "index.html")

type Router struct {
{{- if .Stack.HasFeature "frontend-htmx" }}
    exampleCounter atomic.Int64
{{- end }}
{{- if .Stack.HasFeature "auth-github-oauth2" }}
    authService *appauth.Service
{{- end }}
}

// NewRouter sets up handlers for the standard net/http stack.
func NewRouter() *Router {
    return &Router{}
}

// Register wires the handlers into the provided ServeMux.
func (r *Router) Register(mux *http.ServeMux) {
    mux.HandleFunc("/", r.home)
    mux.HandleFunc("/healthz", r.health)
    mux.HandleFunc("/demo/echo", r.demoEcho)

    {{- if .Stack.HasFeature "auth-github-oauth2" }}
    // Auth routes
    mux.HandleFunc("/auth/", func(w http.ResponseWriter, req *http.Request) {
        if strings.HasSuffix(req.URL.Path, "/callback") {
            r.authCallback(w, req)
            return
        }
        r.authStart(w, req)
    })
    mux.HandleFunc("/logout", r.logout)
    mux.HandleFunc("/login", r.login)
    mux.HandleFunc("/fragments/auth/status", r.authStatus)
    mux.Handle("/profile", r.RequireAuth(http.HandlerFunc(r.profile)))
    {{- end }}

{{- if or (.Stack.HasFeature "frontend-htmx") (.Stack.HasFeature "frontend-fixi") }}
    // Demo API routes backing the generated UI examples. Remove them once replaced.
    mux.HandleFunc("/api/counter", r.apiCounter)
    mux.HandleFunc("/api/increment", r.apiIncrement)
    mux.HandleFunc("/api/todos", r.apiTodos)
    {{- if and (.Stack.HasFeature "frontend-htmx") (or (has "Basecoat" .Stack.Tags) (has "DaisyUI" .Stack.Tags)) }}
    mux.HandleFunc("/fragments/toast/success", r.toastSuccess)
    {{- end }}
{{- end }}
}

{{- if .Stack.HasFeature "auth-github-oauth2" }}

// SetAuthService injects the authentication service into the router.
func (r *Router) SetAuthService(svc *appauth.Service) {
    r.authService = svc
}

func (r *Router) authStatus(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    if r.authService == nil {
        fmt.Fprint(w, `<div id="auth-status"><a class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white" href="/login">Sign in</a></div>`)
        return
    }
    sid := ReadCookie(req, SessionCookieName())
    resp, _ := r.authService.CurrentUser(req.Context(), appauth.CurrentUserRequest{SessionID: sid})
    if resp.User == nil {
        fmt.Fprint(w, `<div id="auth-status"><a class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white" href="/login?next=/profile">Sign in</a></div>`)
        return
    }
    name := html.EscapeString(resp.User.Name)
    fmt.Fprintf(w, `<div id="auth-status" class="flex items-center gap-3 text-sm text-slate-600">
      <span>Signed in as <span class="font-medium text-slate-900">%s</span></span>
      <a class="rounded-lg border border-slate-200 bg-white px-3 py-1.5 text-slate-700 hover:bg-slate-100" href="/profile">Profile</a>
      <a class="rounded-lg bg-slate-900 px-3 py-1.5 text-white hover:bg-slate-700" href="/logout">Logout</a>
    </div>`, name)
}

{{- end }}

func (r *Router) home(w http.ResponseWriter, req *http.Request) {
    http.ServeFile(w, req, indexPage)
}

func (r *Router) health(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    _, _ = w.Write([]byte("ok"))
}

// demoEcho handles a sample POST request and echos a value back.
func (r *Router) demoEcho(w http.ResponseWriter, req *http.Request) {
    if req.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }
    if err := req.ParseForm(); err != nil {
        http.Error(w, "Bad request", http.StatusBadRequest)
        return
    }
    msg := req.Form.Get("message")
    if msg == "" {
        msg = "(empty)"
    }
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    _, _ = w.Write([]byte(msg))
}

{{- if .Stack.HasFeature "frontend-htmx" }}

func (r *Router) apiCounter(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    count := r.exampleCounter.Load()

    fmt.Fprintf(w, `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4">
    <header class="space-y-1">
        <h3 class="text-base font-semibold text-slate-900">Server counter</h3>
        <p class="text-sm text-slate-600">Rendered via HTMX.</p>
    </header>
    <div>
        <p class="text-sm text-slate-600">Current value</p>
        <span id="count" class="text-3xl font-semibold text-slate-900">%d</span>
    </div>
    <button class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white font-medium hover:bg-sky-700 transition" hx-post="/api/increment" hx-target="#count" hx-swap="innerHTML">
        Increment
    </button>
</div>`, count)
}

func (r *Router) apiIncrement(w http.ResponseWriter, req *http.Request) {
    if req.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    count := r.exampleCounter.Add(1)
    fmt.Fprintf(w, "%d", count)
}

func (r *Router) apiTodos(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    todos := []struct {
        Title string
        Done  bool
    }{
        {"Learn HTMX basics", true},
        {"Build server-side components", true},
        {"Create interactive UI without JavaScript", false},
        {"Deploy your app", false},
    }

    html := `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4"><header class="space-y-1"><h3 class="text-base font-semibold text-slate-900">Todo list</h3><p class="text-sm text-slate-600">Loaded from the server using HTMX.</p></header><ul class="space-y-2">`
    for _, todo := range todos {
        statusLabel := "Pending"
        badgeClass := "text-amber-600"
        if todo.Done {
            statusLabel = "Done"
            badgeClass = "text-emerald-600"
        }
        html += fmt.Sprintf(`<li class="flex items-center justify-between rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 text-sm text-slate-700">
            <span>%s</span>
            <span class="font-medium %s">%s</span>
        </li>`, todo.Title, badgeClass, statusLabel)
    }
    html += `</ul></div>`

    fmt.Fprint(w, html)
}

{{- else if .Stack.HasFeature "frontend-fixi" }}

func (r *Router) apiCounter(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    fmt.Fprintf(w, `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-2">
    <h3 class="text-base font-semibold text-slate-900">Fixi.js fetched content</h3>
    <p class="text-sm text-slate-600">Counter: <span class="font-semibold text-slate-900">42</span></p>
</div>`)
}

func (r *Router) apiIncrement(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    fmt.Fprintf(w, "43")
}

func (r *Router) apiTodos(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    todos := []string{
        "Learn Fixi.js patterns",
        "Build reactive components",
        "Deploy your app",
    }

    html := `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-2"><h3 class="text-base font-semibold text-slate-900">Server todos</h3><ul class="space-y-2">`
    for _, todo := range todos {
        html += fmt.Sprintf(`<li class="rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 text-sm text-slate-700">%s</li>`, todo)
    }
    html += `</ul></div>`

    fmt.Fprint(w, html)
}

{{- end }}

{{- if and (.Stack.HasFeature "frontend-htmx") (or (has "Basecoat" .Stack.Tags) (has "DaisyUI" .Stack.Tags)) }}

func (r *Router) toastSuccess(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    {{- if has "Basecoat" .Stack.Tags }}
    fmt.Fprint(w, `<div class="toast" role="status" aria-atomic="true" aria-hidden="false" data-category="success">
    <div class="toast-content">
        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10" /><path d="m9 12 2 2 4-4" /></svg>
        <section>
            <h2>Success</h2>
            <p>HTMX loaded this toast from the backend.</p>
        </section>
        <footer>
            <button type="button" class="btn" data-toast-action>Dismiss</button>
        </footer>
    </div>
</div>`)
    {{- else if has "DaisyUI" .Stack.Tags }}
    fmt.Fprint(w, `<div class="alert alert-success shadow-lg transition-opacity duration-200">
    <span>HTMX loaded this toast from the backend.</span>
    <button type="button" class="btn btn-sm btn-ghost" data-daisy-toast-dismiss>Dismiss</button>
</div>`)
    {{- end }}
}

{{- end }}
