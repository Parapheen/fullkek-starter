package http

import (
    "fmt"
    "net/http"
    "net/url"
    "path/filepath"
    "strings"
    "unicode"

    httpinfra "{{ .ModulePath }}/internal/infrastructure/http"
)

// authStart begins the OAuth flow for the requested provider.
func (r *Router) authStart(w http.ResponseWriter, req *http.Request) {
    if r.authService == nil {
        http.Error(w, "auth not configured", http.StatusServiceUnavailable)
        return
    }
    provider := providerFromRequest(req)
    if provider == "" {
        http.NotFound(w, req)
        return
    }
    next := req.URL.Query().Get("next")
    if !isSafeNext(next) {
        next = ""
    }
    state, redirectURL := r.authService.StartOAuth(req.Context(), provider)
    if state == "" || redirectURL == "" {
        http.Error(w, "oauth provider unavailable", http.StatusBadRequest)
        return
    }
    http.SetCookie(w, &http.Cookie{
        Name:     "oauth_state",
        Value:    state,
        Path:     "/",
        HttpOnly: true,
        SameSite: http.SameSiteLaxMode,
        MaxAge:   300, // 5 minutes
    })
    http.SetCookie(w, &http.Cookie{
        Name:     "oauth_next",
        Value:    url.QueryEscape(next),
        Path:     "/",
        HttpOnly: true,
        SameSite: http.SameSiteLaxMode,
        MaxAge:   300,
    })
    http.Redirect(w, req, redirectURL, http.StatusFound)
}

// authCallback completes the OAuth flow and stores the user in a server-side session.
func (r *Router) authCallback(w http.ResponseWriter, req *http.Request) {
    if r.authService == nil {
        http.Error(w, "auth not configured", http.StatusServiceUnavailable)
        return
    }
    provider := providerFromRequest(req)
    if provider == "" {
        http.NotFound(w, req)
        return
    }
    code := req.URL.Query().Get("code")
    state := req.URL.Query().Get("state")
    cookieState := httpinfra.ReadCookie(req, "oauth_state")
    ua := req.Header.Get("User-Agent")
    ip := req.RemoteAddr

    user, sess, err := r.authService.HandleCallback(req.Context(), provider, code, state, cookieState, ua, ip)
    if err != nil {
        http.Error(w, fmt.Sprintf("auth error: %v", err), http.StatusUnauthorized)
        return
    }
    httpinfra.SetCookie(w, httpinfra.SessionCookieName(), sess.ID, sess.ExpiresAt)
    next := httpinfra.ReadCookie(req, "oauth_next")
    if next != "" {
        if decoded, err := url.QueryUnescape(next); err == nil {
            next = decoded
        }
    }
    http.SetCookie(w, &http.Cookie{Name: "oauth_next", Value: "", Path: "/", MaxAge: -1})
    dest := "/profile"
    if isSafeNext(next) {
        dest = next
    }
    http.Redirect(w, req, dest, http.StatusFound)
    _ = user
}

// login renders the login page listing all configured providers.
func (r *Router) login(w http.ResponseWriter, req *http.Request) {
    if r.authService == nil {
        http.Error(w, "auth not configured", http.StatusServiceUnavailable)
        return
    }
    next := req.URL.Query().Get("next")
    if !isSafeNext(next) {
        next = ""
    }
    nextQuery := ""
    if next != "" {
        nextQuery = "?next=" + url.QueryEscape(next)
    }
    providers := r.authService.ProviderIDs()
    type providerOption struct {
        ID    string
        Label string
    }
    formatLabel := func(id string) string {
        cleaned := strings.ReplaceAll(id, "-", " ")
        cleaned = strings.ReplaceAll(cleaned, "_", " ")
        fields := strings.Fields(cleaned)
        if len(fields) == 0 {
            return id
        }
        for i, field := range fields {
            lower := strings.ToLower(field)
            runes := []rune(lower)
            if len(runes) == 0 {
                continue
            }
            runes[0] = unicode.ToUpper(runes[0])
            fields[i] = string(runes)
        }
        return strings.Join(fields, " ")
    }
    opts := make([]providerOption, 0, len(providers))
    for _, id := range providers {
        opts = append(opts, providerOption{ID: id, Label: formatLabel(id)})
    }
    data := struct {
        Next      string
        NextQuery string
        Providers []providerOption
    }{
        Next:      next,
        NextQuery: nextQuery,
        Providers: opts,
    }
    if err := renderTemplate(w, filepath.Join("web", "templates", "pages", "login.html"), data); err != nil {
        http.Error(w, fmt.Sprintf("render error: %v", err), http.StatusInternalServerError)
        return
    }
}

// profile renders a protected page with basic user info.
func (r *Router) profile(w http.ResponseWriter, req *http.Request) {
    if r.authService == nil {
        http.Error(w, "auth not configured", http.StatusServiceUnavailable)
        return
    }
    sid := httpinfra.ReadCookie(req, httpinfra.SessionCookieName())
    user, _ := r.authService.CurrentUser(req.Context(), sid)
    if user == nil {
        http.Redirect(w, req, r.signInPath(), http.StatusFound)
        return
    }

    data := struct {
        Name      string
        Email     string
        AvatarURL string
        ID        string
    }{
        Name:      user.Name,
        Email:     user.Email,
        AvatarURL: user.AvatarURL,
        ID:        user.ID,
    }

    if err := renderTemplate(w, filepath.Join("web", "templates", "pages", "profile.html"), data); err != nil {
        http.Error(w, fmt.Sprintf("render error: %v", err), http.StatusInternalServerError)
        return
    }
}

// logout clears the session.
func (r *Router) logout(w http.ResponseWriter, req *http.Request) {
    sid := httpinfra.ReadCookie(req, httpinfra.SessionCookieName())
    if r.authService != nil {
        _ = r.authService.Logout(req.Context(), sid)
    }
    httpinfra.ClearCookie(w, httpinfra.SessionCookieName())
    http.Redirect(w, req, "/", http.StatusFound)
}

func providerFromRequest(req *http.Request) string {
    path := strings.Trim(req.URL.Path, "/")
    parts := strings.Split(path, "/")
    if len(parts) < 2 {
        return ""
    }
    if parts[0] != "auth" {
        return ""
    }
    return parts[1]
}

func (r *Router) signInPath() string {
    return "/login"
}

func isSafeNext(s string) bool {
    if s == "" {
        return false
    }
    if strings.Contains(s, "://") {
        return false
    }
    if !strings.HasPrefix(s, "/") {
        return false
    }
    if strings.HasPrefix(s, "//") {
        return false
    }
    return true
}
