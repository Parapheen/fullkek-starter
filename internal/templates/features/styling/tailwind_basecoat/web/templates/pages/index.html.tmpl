<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{ .AppName }} - Tailwind + Basecoat</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/basecoat-css@0.3.2/dist/basecoat.cdn.min.css" />
    <link rel="stylesheet" href="/assets/styles/output.css" />
    <script src="https://cdn.jsdelivr.net/npm/basecoat-css@0.3.2/dist/js/all.min.js" defer></script>
    {{- if .Stack.HasFeature "frontend-htmx" }}
    <script src="/assets/scripts/htmx.min.js" defer></script>
    {{- end }}
    {{- if .Stack.HasFeature "frontend-fixi" }}
    <script src="/assets/scripts/fixi.js" defer></script>
    {{- end }}
  </head>
  <body class="bg-slate-50 text-slate-900">
    <main class="max-w-5xl mx-auto px-6 py-16 space-y-16">
      <header class="text-center space-y-6">
        <span class="text-sm font-semibold tracking-[0.35em] text-sky-600 uppercase">Tailwind + Basecoat</span>
        <h1 class="text-4xl sm:text-5xl font-bold leading-tight">Welcome to {{ .AppName }}</h1>
        <p class="text-lg text-slate-600 max-w-2xl mx-auto">
          Start with Tailwind utilities, then layer in Basecoat components when you need polished UI.
          Everything stays server-rendered and easy to extend.
        </p>
        <div class="flex flex-wrap justify-center gap-3">
          <a class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-5 py-2 text-white font-medium shadow-sm hover:bg-sky-700 transition" href="https://basecoatui.com/components" target="_blank" rel="noreferrer">
            Basecoat Components
          </a>
          <a class="inline-flex items-center gap-2 rounded-lg border border-slate-200 bg-white px-5 py-2 text-slate-700 font-medium hover:bg-slate-100 transition" href="https://tailwindcss.com/docs" target="_blank" rel="noreferrer">
            Tailwind Docs
          </a>
        </div>
      </header>

      <section class="grid gap-6 md:grid-cols-3">
        <article class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <h2 class="text-lg font-semibold text-slate-900">Utility-first layout</h2>
          <p class="mt-3 text-sm text-slate-600">
            Tailwind handles spacing, typography, and responsive behaviour. Customise the palette or tokens in <code class="font-mono text-slate-500">web/assets/styles</code>.
          </p>
        </article>
        <article class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <h2 class="text-lg font-semibold text-slate-900">Basecoat at the ready</h2>
          <p class="mt-3 text-sm text-slate-600">
            The Basecoat CDN is preloaded so you can drop in components—cards, alerts, toasts—without extra setup.
          </p>
        </article>
        <article class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <h2 class="text-lg font-semibold text-slate-900">Progressive enhancement</h2>
          <p class="mt-3 text-sm text-slate-600">
            HTMX and Fixi.js examples keep interactions lightweight. Remove them once you wire your own flows.
          </p>
        </article>
      </section>

      <section class="grid gap-6 md:grid-cols-2">
        <article class="card w-full">
          <header>
            <h2>Basecoat component sampler</h2>
            <p>Mix Basecoat building blocks with Tailwind layout utilities.</p>
          </header>
          <section class="space-y-4">
            <div class="flex flex-wrap gap-2">
              <span class="badge">Badge</span>
              <span class="badge-outline">Outline</span>
              <span class="badge-secondary">Secondary</span>
            </div>
            <div class="flex flex-wrap gap-2">
              <button class="btn">Primary</button>
              <button class="btn-secondary">Secondary</button>
              <button class="btn-outline">Outline</button>
              <button class="btn-ghost">Ghost</button>
            </div>
            <div class="alert">
              <section>This is an alert using Basecoat defaults—perfect for inline notices.</section>
            </div>
            <div class="grid gap-2">
              <label class="text-sm text-slate-600" for="demo-email">Email</label>
              <input id="demo-email" class="input" type="email" placeholder="jane@example.com" />
            </div>
          </section>
          <footer class="flex justify-end gap-2">
            <button class="btn-outline" type="button">Cancel</button>
            <button class="btn" type="button">Save</button>
          </footer>
        </article>

        <article class="card w-full space-y-4">
          <header>
            <h2>Toast showcase</h2>
            <p>Trigger Basecoat toasts via HTMX fragments.</p>
          </header>
          <section class="space-y-3">
            {{- if .Stack.HasFeature "frontend-htmx" }}
            <button
              class="btn-outline"
              hx-trigger="click"
              hx-get="/fragments/toast/success"
              hx-target="#toaster"
              hx-swap="beforeend"
            >
              Toast from backend (HTMX)
            </button>
            {{- end }}
            <p class="text-sm text-slate-600">
              Toasts appear in the toaster container at the bottom of the page. Update the message or styling to match your brand.
            </p>
          </section>
        </article>
      </section>

      {{- if .Stack.HasFeature "frontend-htmx" }}
      <section class="rounded-2xl border border-slate-200 bg-white p-8 shadow-sm space-y-4">
        <h2 class="text-2xl font-semibold text-slate-900">HTMX demo</h2>
        <p class="text-sm text-slate-600">
          Fetch a counter fragment using <code class="font-mono text-slate-500">hx-get</code> and swap it into place—no custom JavaScript needed.
        </p>
        <button
          class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white font-medium hover:bg-sky-700 transition"
          hx-get="/api/counter"
          hx-target="#htmx-counter"
          hx-swap="innerHTML"
        >
          Load counter
        </button>
        <div id="htmx-counter" class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-slate-600">
          The counter response will render here.
        </div>
      </section>
      {{- end }}

      {{- if .Stack.HasFeature "frontend-fixi" }}
      <section class="rounded-2xl border border-slate-200 bg-white p-8 shadow-sm space-y-4">
        <h2 class="text-2xl font-semibold text-slate-900">Fixi.js demo</h2>
        <p class="text-sm text-slate-600">
          Fetch the same counter fragment using Fixi controllers. Everything stays declarative in your HTML.
        </p>
        <button class="inline-flex items-center gap-2 rounded-lg bg-slate-900 px-4 py-2 text-white font-medium hover:bg-slate-700 transition" fx-action="/api/counter" fx-target="#fixi-counter">
          Fetch counter
        </button>
        <div id="fixi-counter" class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-slate-600">
          Fixi.js content will appear here.
        </div>
      </section>
      {{- end }}

      <footer class="text-center space-y-2 text-sm text-slate-500">
        <p>Generated by fullkek • {{ .AppName }} © 2025</p>
        <div class="flex flex-wrap justify-center gap-2 text-slate-500">
          {{ range .Stack.Features }}
          <span class="rounded-full border border-slate-200 bg-white px-3 py-1 text-xs font-medium uppercase tracking-wide">{{ .Name }}</span>
          {{ end }}
        </div>
      </footer>
    </main>

    <div id="toaster" class="toaster" data-align="end"></div>

    <script>
      const bindBasecoatToasts = () => {
        const toastButtons = document.querySelectorAll('[data-toast]');
        toastButtons.forEach(button => {
          if (button.dataset.toastBound === 'true') {
            return;
          }
          button.dataset.toastBound = 'true';
          button.addEventListener('click', () => {
            const message = button.getAttribute('data-toast') || 'Toast message';
            window.basecoat?.toast?.({
              message,
              category: 'success',
              title: 'Success',
              cancel: { label: 'Dismiss' },
            });
          });
        });
      };

      document.addEventListener('DOMContentLoaded', () => {
        bindBasecoatToasts();
      });

      document.addEventListener('htmx:afterSwap', () => {
        if (window.basecoat?.initAll) {
          window.basecoat.initAll();
        }
        bindBasecoatToasts();
      });
    </script>
  </body>
</html>
