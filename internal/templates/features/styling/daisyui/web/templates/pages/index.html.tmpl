<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{ .AppName }} - DaisyUI Standalone</title>
    <link rel="stylesheet" href="/assets/styles/output.css" />
    <link rel="stylesheet" href="/assets/styles/custom.css" />
    <script src="https://cdn.jsdelivr.net/npm/theme-change@2.0.2/index.js" defer></script>
    {{- if .Stack.HasFeature "frontend-htmx" }}
    <script src="/assets/scripts/htmx.min.js" defer></script>
    {{- end }}
    {{- if .Stack.HasFeature "frontend-fixi" }}
    <script src="/assets/scripts/fixi.js" defer></script>
    {{- end }}
  </head>
  <body class="min-h-screen bg-base-200 text-base-content">
    <main class="mx-auto flex max-w-5xl flex-col gap-16 px-6 py-16">
      <header class="flex flex-col items-center gap-6 text-center">
        <span class="badge badge-outline badge-accent uppercase tracking-[0.35em]">DaisyUI</span>
        <h1 class="text-4xl font-black sm:text-5xl">Welcome to {{ .AppName }}</h1>
        <p class="max-w-2xl text-lg opacity-70">
          Tailwind's standalone CLI compiles DaisyUI locally—<code class="font-mono text-sm">make go</code> runs the fast install script once and keeps <code class="font-mono text-sm">output.css</code> up to date while you build.
        </p>
        <div class="flex flex-wrap justify-center gap-3">
          <a class="btn btn-primary" href="https://daisyui.com/components" target="_blank" rel="noreferrer">
            Browse components
          </a>
          <a class="btn btn-outline" href="https://daisyui.com/docs/install/standalone/" target="_blank" rel="noreferrer">
            Standalone docs
          </a>
          <button class="btn btn-brand" type="button" data-daisy-toast="Custom button styles are easy—this one comes from custom.css.">
            Brand toast
          </button>
        </div>
      </header>

      <section class="grid gap-6 md:grid-cols-3">
        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-3">
            <h2 class="card-title">Fast setup</h2>
            <p class="text-sm opacity-70">
              A single script grabs the Tailwind CLI binary and DaisyUI plugin under <code class="font-mono text-sm">web/assets/styles</code>. The watcher writes compiled CSS to <code class="font-mono text-sm">public/assets/styles/output.css</code>.
            </p>
          </div>
        </article>
        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-3">
            <h2 class="card-title">Utility-first layout</h2>
            <p class="text-sm opacity-70">
              Combine DaisyUI components with Tailwind classes like <code class="font-mono text-sm">grid</code>, <code class="font-mono text-sm">gap-6</code>, and responsive prefixes to compose screens quickly.
            </p>
          </div>
        </article>
        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-3">
            <h2 class="card-title">Progressive enhancement</h2>
            <p class="text-sm opacity-70">
              Optional HTMX and Fixi.js hooks are pre-wired. Swap fragments or sprinkle live interactions as your app evolves.
            </p>
          </div>
        </article>
      </section>

      <section class="grid gap-6 md:grid-cols-2">
        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-4">
            <header>
              <h2 class="card-title">Component sampler</h2>
              <p class="text-sm opacity-70">A few DaisyUI building blocks to get moving.</p>
            </header>
            <div class="flex flex-wrap gap-2">
              <span class="badge badge-primary">Primary</span>
              <span class="badge badge-secondary">Secondary</span>
              <span class="badge badge-outline">Outline</span>
            </div>
            <div class="join join-vertical sm:join-horizontal">
              <button class="btn btn-primary join-item" type="button">Primary</button>
              <button class="btn btn-outline join-item" type="button">Outline</button>
              <button class="btn btn-ghost join-item" type="button">Ghost</button>
            </div>
            <label class="form-control w-full max-w-xs">
              <div class="label">
                <span class="label-text">Email</span>
                <span class="label-text-alt">Required</span>
              </div>
              <input id="demo-email" type="email" placeholder="jane@example.com" class="input input-bordered" />
              <div class="label">
                <span class="label-text-alt">We'll never share your email.</span>
              </div>
            </label>
            <div class="alert alert-success">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6 shrink-0 stroke-current">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4" />
              </svg>
              <span>Alerts, badges, and buttons work out of the box.</span>
            </div>
            <footer class="flex justify-end gap-2">
              <button class="btn btn-ghost" type="button">Cancel</button>
              <button class="btn btn-primary" type="button">Save</button>
            </footer>
          </div>
        </article>

        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-4">
            <header>
              <h2 class="card-title">Theme controls</h2>
              <p class="text-sm opacity-70">Use <code class="font-mono text-sm">data-choose-theme</code> plus the <code class="font-mono text-sm">theme-change</code> helper to toggle palettes.</p>
            </header>
            <select class="select select-bordered w-full" data-choose-theme>
              <option value="">System</option>
              <option value="light">Light</option>
              <option value="dark">Dark</option>
              <option value="cupcake">Cupcake</option>
              <option value="emerald">Emerald</option>
              <option value="synthwave">Synthwave</option>
            </select>
            <p class="text-sm opacity-70">
              The helper script listens for changes and updates <code class="font-mono text-sm">data-theme</code> on <code class="font-mono text-sm">html</code>.
            </p>
            <div class="mockup-code">
              <pre data-prefix="$">
                <code>data-choose-theme="light"</code>
              </pre>
              <pre data-prefix="$">
                <code>data-theme="light"</code>
              </pre>
            </div>
          </div>
        </article>
      </section>

      <section class="grid gap-6 md:grid-cols-2">
        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-3">
            <header>
              <h2 class="card-title">Toast showcase</h2>
              <p class="text-sm opacity-70">Trigger DaisyUI toasts via HTMX fragments or local events.</p>
            </header>
            {{- if .Stack.HasFeature "frontend-htmx" }}
            <button
              class="btn btn-outline"
              hx-trigger="click"
              hx-get="/fragments/toast/success"
              hx-target="#toaster"
              hx-swap="beforeend"
              type="button"
            >
              Toast from backend (HTMX)
            </button>
            {{- end }}
            <button class="btn btn-primary" type="button" data-daisy-toast="Client-side toast triggered locally.">
              Toast on the spot
            </button>
            <p class="text-sm opacity-70">
              Toasts append to the floating container in the corner. Adjust the markup or animation in your htmx fragment response to match your brand.
            </p>
          </div>
        </article>

        <article class="card bg-base-100 shadow-xl">
          <div class="card-body space-y-3">
            <header>
              <h2 class="card-title">Activity feed</h2>
              <p class="text-sm opacity-70">Use Tailwind layout utilities to orchestrate DaisyUI components.</p>
            </header>
            <ul class="timeline timeline-vertical">
              <li>
                <div class="timeline-start timeline-box">Scaffold app</div>
                <div class="timeline-middle">
                  <span class="indicator"></span>
                </div>
                <div class="timeline-end timeline-box">Run <code class="font-mono text-sm">go run ./cmd/fullkek</code></div>
              </li>
              <li>
                <hr />
              </li>
              <li>
                <div class="timeline-start timeline-box">Style UI</div>
                <div class="timeline-middle">
                  <span class="indicator"></span>
                </div>
                <div class="timeline-end timeline-box">Mix Tailwind utilities + DaisyUI components</div>
              </li>
              <li>
                <hr />
              </li>
              <li>
                <div class="timeline-start timeline-box">Ship</div>
                <div class="timeline-middle">
                  <span class="indicator"></span>
                </div>
                <div class="timeline-end timeline-box">Deploy with confidence</div>
              </li>
            </ul>
          </div>
        </article>
      </section>

      {{- if .Stack.HasFeature "frontend-htmx" }}
      <section class="card bg-base-100 shadow-xl">
        <div class="card-body space-y-4">
          <h2 class="card-title">HTMX demo</h2>
          <p class="text-sm opacity-70">
            Fetch a counter fragment using <code class="font-mono text-sm">hx-get</code> and seamlessly swap it into place—no custom JavaScript required.
          </p>
          <button
            class="btn btn-secondary"
            hx-get="/api/counter"
            hx-target="#htmx-counter"
            hx-swap="innerHTML"
            type="button"
          >
            Load counter
          </button>
          <div id="htmx-counter" class="rounded-2xl border border-dashed border-base-300 bg-base-200/60 px-4 py-5 text-sm opacity-80">
            The counter response will render here.
          </div>
        </div>
      </section>
      {{- end }}

      {{- if .Stack.HasFeature "frontend-fixi" }}
      <section class="card bg-base-100 shadow-xl">
        <div class="card-body space-y-4">
          <h2 class="card-title">Fixi.js demo</h2>
          <p class="text-sm opacity-70">
            Fetch the same counter fragment using Fixi controllers. Everything stays declarative in your HTML.
          </p>
          <button class="btn btn-accent" fx-action="/api/counter" fx-target="#fixi-counter" type="button">
            Fetch counter
          </button>
          <div id="fixi-counter" class="rounded-2xl border border-dashed border-base-300 bg-base-200/60 px-4 py-5 text-sm opacity-80">
            Fixi.js content will appear here.
          </div>
        </div>
      </section>
      {{- end }}

      <footer class="flex flex-col items-center gap-3 text-center text-sm opacity-60">
        <p>Generated by fullkek • {{ .AppName }} © 2025</p>
        <div class="flex flex-wrap justify-center gap-2">
          {{ range .Stack.Features }}
          <span class="badge badge-outline">{{ .Name }}</span>
          {{ end }}
        </div>
      </footer>
    </main>

    <div id="toaster" class="toast toast-end toast-bottom"></div>

    <script>
      const wireToastDismiss = root => {
        root.querySelectorAll('[data-daisy-toast-dismiss]').forEach(button => {
          if (button.dataset.toastDismissBound === 'true') {
            return;
          }
          button.dataset.toastDismissBound = 'true';
          button.addEventListener('click', () => {
            const alert = button.closest('.alert');
            if (!alert) {
              return;
            }
            alert.classList.add('opacity-0');
            window.setTimeout(() => alert.remove(), 200);
          });
        });
      };

      const pushDaisyToast = (variant, message) => {
        const toaster = document.getElementById('toaster');
        if (!toaster) {
          return;
        }
        const toast = document.createElement('div');
        toast.className = `alert alert-${variant} shadow-lg transition-opacity duration-200`;
        toast.innerHTML = `
          <span>${message}</span>
          <button type="button" class="btn btn-sm btn-ghost" data-daisy-toast-dismiss>Dismiss</button>
        `;
        toaster.appendChild(toast);
        wireToastDismiss(toast);
        window.setTimeout(() => {
          toast.classList.add('opacity-0');
          window.setTimeout(() => toast.remove(), 300);
        }, 4000);
      };

      const bindToastButtons = () => {
        document.querySelectorAll('[data-daisy-toast]').forEach(button => {
          if (button.dataset.toastBound === 'true') {
            return;
          }
          button.dataset.toastBound = 'true';
          button.addEventListener('click', () => {
            const message = button.getAttribute('data-daisy-toast') || 'Toast message';
            const variant = button.getAttribute('data-daisy-variant') || 'success';
            pushDaisyToast(variant, message);
          });
        });
      };

      const hydrateToasts = () => {
        bindToastButtons();
        wireToastDismiss(document);
      };

      document.addEventListener('DOMContentLoaded', hydrateToasts);
      document.addEventListener('htmx:afterSwap', hydrateToasts);
    </script>
  </body>
</html>
