// HTMX example endpoints - add these to your router.go file

{{- if .Stack.HasFeature "http-chi" }}
// Mount HTMX routes
router.Get("/api/counter", r.htmxCounter)
router.Post("/api/increment", r.htmxIncrement)
router.Get("/api/todos", r.htmxTodoList)
{{- if or (has "Basecoat" .Stack.Tags) (has "DaisyUI" .Stack.Tags) }}
router.Get("/fragments/toast/success", r.toastSuccess)
{{- end }}

func (r *Router) htmxCounter(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    fmt.Fprintf(w, `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4">
    <header class="space-y-1">
        <h3 class="text-base font-semibold text-slate-900">Server counter</h3>
        <p class="text-sm text-slate-600">Rendered via HTMX.</p>
    </header>
    <div>
        <p class="text-sm text-slate-600">Current value</p>
        <span id="count" class="text-3xl font-semibold text-slate-900">0</span>
    </div>
    <button class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white font-medium hover:bg-sky-700 transition" hx-post="/api/increment" hx-target="#count" hx-swap="innerHTML">
        Increment
    </button>
</div>`)
}

func (r *Router) htmxIncrement(w http.ResponseWriter, req *http.Request) {
    // In a real app, you'd track state in a session or database
    w.Header().Set("Content-Type", "text/html")
    fmt.Fprintf(w, "1")
}

func (r *Router) htmxTodoList(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    todos := []string{
        "Learn HTMX basics",
        "Build server-side components",
        "Deploy your app",
    }

    html := `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4"><header class="space-y-1"><h3 class="text-base font-semibold text-slate-900">Todo list</h3><p class="text-sm text-slate-600">Loaded from the server using HTMX.</p></header><ul class="space-y-2">`
    for _, todo := range todos {
        html += fmt.Sprintf(`<li class="rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 text-sm text-slate-700">%s</li>`, todo)
    }
    html += `</ul></div>`

    fmt.Fprint(w, html)
}
{{- end }}

{{- if .Stack.HasFeature "http-standard" }}
// Register HTMX routes
mux.HandleFunc("/api/counter", r.htmxCounter)
mux.HandleFunc("/api/increment", r.htmxIncrement)
mux.HandleFunc("/api/todos", r.htmxTodoList)
{{- if or (has "Basecoat" .Stack.Tags) (has "DaisyUI" .Stack.Tags) }}
mux.HandleFunc("/fragments/toast/success", r.toastSuccess)
{{- end }}

func (r *Router) htmxCounter(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    fmt.Fprintf(w, `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4">
    <header class="space-y-1">
        <h3 class="text-base font-semibold text-slate-900">Server counter</h3>
        <p class="text-sm text-slate-600">Rendered via HTMX.</p>
    </header>
    <div>
        <p class="text-sm text-slate-600">Current value</p>
        <span id="count" class="text-3xl font-semibold text-slate-900">0</span>
    </div>
    <button class="inline-flex items-center gap-2 rounded-lg bg-sky-600 px-4 py-2 text-white font-medium hover:bg-sky-700 transition" hx-post="/api/increment" hx-target="#count" hx-swap="innerHTML">
        Increment
    </button>
</div>`)
}

func (r *Router) htmxIncrement(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    fmt.Fprintf(w, "1")
}

func (r *Router) htmxTodoList(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    todos := []string{
        "Learn HTMX basics",
        "Build server-side components",
        "Deploy your app",
    }

    html := `<div class="rounded-2xl border border-slate-200 bg-white p-5 shadow-sm space-y-4"><header class="space-y-1"><h3 class="text-base font-semibold text-slate-900">Todo list</h3><p class="text-sm text-slate-600">Loaded from the server using HTMX.</p></header><ul class="space-y-2">`
    for _, todo := range todos {
        html += fmt.Sprintf(`<li class="rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 text-sm text-slate-700">%s</li>`, todo)
    }
    html += `</ul></div>`

    fmt.Fprint(w, html)
}
{{- end }}

{{- if or (has "Basecoat" .Stack.Tags) (has "DaisyUI" .Stack.Tags) }}

func (r *Router) toastSuccess(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/html")
    {{- if has "Basecoat" .Stack.Tags }}
    fmt.Fprint(w, `<div class="toast" role="status" aria-atomic="true" aria-hidden="false" data-category="success">
    <div class="toast-content">
        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10" /><path d="m9 12 2 2 4-4" /></svg>
        <section>
            <h2>Success</h2>
            <p>HTMX loaded this toast from the backend.</p>
        </section>
        <footer>
            <button type="button" class="btn" data-toast-action>Dismiss</button>
        </footer>
    </div>
</div>`)
    {{- else if has "DaisyUI" .Stack.Tags }}
    fmt.Fprint(w, `<div class="alert alert-success shadow-lg transition-opacity duration-200">
    <span>HTMX loaded this toast from the backend.</span>
    <button type="button" class="btn btn-sm btn-ghost" data-daisy-toast-dismiss>Dismiss</button>
</div>`)
    {{- end }}
}

{{- end }}
