# {{ .AppName }}

Generated with **fullkek** using the **{{ .Stack.Name }}** stack.

> This scaffold wires the project for a hypermedia-first workflow. Templates, assets,
and transport logic are stubbed out so you can focus on implementing the UI layer
that best fits the stack.

## Stack

- {{ range $index, $tag := .Stack.Tags }}{{ if $index }}, {{ end }}{{ $tag }}{{ end }}

## Getting Started

Install dependencies:

```bash
go mod tidy
```
{{if has "Tailwind" .Stack.Tags}}
For Tailwind CSS, download the standalone binary:

```bash
make tailwind-install
```

Then build your CSS (or watch for changes):

```bash
make tailwind-build    # Build once
make tailwind-watch    # Watch and rebuild on changes
```

Run Tailwind and the Go server together (installs Tailwind if needed):

```bash
make go
```
{{end}}
Run the development server:

```bash
make dev
# or
go run ./cmd/server
```

These commands attempt to open `http://localhost:3333` in your default browser. Override `APP_URL`
when running `make` if you change the listen address, or export `BROWSER=echo` to suppress opening.

The server will start on `http://localhost:3333`

### Environment (.env)

Copy `.env.example` to `.env` and adjust values as needed. The app automatically loads `.env` on startup.

- `SERVER_ADDR` – listen address (default `:3333`)
{{- if .Stack.HasFeature "database-sqlite" }}
- `SQLITE_DSN` – SQLite DSN (empty uses built-in default)
{{- end }}
{{- if .Stack.HasFeature "auth-github-oauth2" }}
- `GITHUB_CLIENT_ID` – GitHub OAuth client ID
- `GITHUB_CLIENT_SECRET` – GitHub OAuth client secret
- `OAUTH_CALLBACK_BASE` – base URL used to build provider callbacks
{{- if .Stack.HasFeature "database-sqlite" }}
- `SESSION_COOKIE_NAME` – session cookie name (default `sid`)
- `SESSION_TTL_DAYS` – session lifetime in days (default `30`)
{{- end }}
{{- end }}

## Available Commands

Run `make help` to see all available commands:

- `make dev` - Run development server with auto-reload
- `make go` - Start development server and Tailwind watcher (if enabled)
- `make build` - Build the application binary
- `make run` - Build and run the application
- `make test` - Run tests
- `make clean` - Clean build artifacts{{if has "Tailwind" .Stack.Tags}}
- `make tailwind-install` - Download standalone Tailwind CSS binary
- `make tailwind-watch` - Watch and rebuild Tailwind CSS on changes
- `make tailwind-build` - Build Tailwind CSS once{{end}}

{{- if .Stack.HasFeature "database-sqlite" }}
### Database Migrations (goose)

Install goose locally and manage migrations:

```bash
make goose-install
make migrate-create name=create_users
make migrate-up
make migrate-status
```

Environment for SQLite DSN and migrations directory can be overridden via `DB_DSN` and `MIGRATIONS_DIR`.
{{- end }}

### OAuth (if enabled)

Set the following environment variables to activate GitHub OAuth:

```bash
export GITHUB_CLIENT_ID=...
export GITHUB_CLIENT_SECRET=...
export OAUTH_CALLBACK_BASE="http://localhost:3333"
```

Routes available:

- `/auth/{provider}` – start login for the selected provider
- `/auth/{provider}/callback` – provider callback endpoint
- `/profile` – protected page showing user info
- `/logout` – clear session

## Project Structure

```
{{ .AppName }}/
├── cmd/server/          # Application entry point
├── internal/
│   ├── app/            # Application setup and wiring
{{- if .Stack.HasFeature "database-sqlite" }}
│   ├── infrastructure/
│   │   └── persistence/ # Persistence helpers wrapping sqlx
{{- end }}
│   └── transport/
│       └── http/       # HTTP server and routing
├── web/
│   ├── assets/         # Static assets (CSS, JS)
│   └── templates/      # HTML templates
{{- if .Stack.HasFeature "database-sqlite" }}
├── var/
│   └── data/          # Local SQLite storage (gitignored)
{{- end }}
└── bin/                # Build artifacts and tools
```

## Next Steps

1. Explore the `internal/app` package to understand the application structure
1. Add routes and handlers in `internal/transport/http/router.go`
1. Create HTML templates under `web/templates/`
1. Customize styles in `web/assets/styles/`
{{- if .Stack.HasFeature "database-sqlite" }}
1. Review the helpers in `internal/infrastructure/persistence/sqlite.go`
{{- end }}
{{if has "Tailwind" .Stack.Tags}}
1. Use Tailwind utility classes in your templates
1. Run `make go` during development to serve the app and rebuild CSS
{{end}}

## Notes
{{if has "Tailwind" .Stack.Tags}}
### Tailwind CSS

This project uses the standalone Tailwind CSS binary (no npm required!). The binary is downloaded from the [official Tailwind CSS GitHub releases](https://github.com/tailwindlabs/tailwindcss/releases) and placed in the `bin/` directory.

- Input CSS: `web/assets/styles/input.css`
- Output CSS: `public/assets/styles/output.css`
- The output CSS is generated from the input and your HTML templates and is served from the `public/` directory

The Makefile automatically detects your OS and architecture and downloads the correct binary.
{{end}}
{{- if .Stack.HasFeature "database-sqlite" }}
### SQLite Persistence

The `internal/infrastructure/persistence` package provides a focused entry point
for bootstrapping a SQLite database with sqlx. It applies WAL mode, busy
timeouts, and foreign key enforcement by default, storing data under `data/`
(ignored by git). Override the DSN or connection pool settings via
`persistence.Config` to fit your deployment environment. The driver uses CGO,
so ensure the relevant SQLite toolchain is available when building or
cross-compiling.
{{- end }}
{{if has "Basecoat" .Stack.Tags}}
### Basecoat Components

Basecoat ships through a CDN link and optional script that are already referenced
from the generated templates. Update the CDN version in your HTML if you want to
pin a newer release. Extend component styles via Tailwind in
`web/assets/styles/input.css`—your changes will compile into
`public/assets/styles/output.css` while keeping Basecoat defaults.
{{end}}
{{if has "DaisyUI" .Stack.Tags}}
### DaisyUI Standalone

The DaisyUI fast installer drops the Tailwind standalone CLI and daisyUI plugin
under `web/assets/styles`. The generated page links to
`/assets/styles/output.css`, which Tailwind compiles during development.

Run `make go` to start the watcher and Go server. The first run executes
`curl -sL daisyui.com/fast | bash -s -- ./web/assets/styles`, creates
`public/assets/styles/output.css`, and caches the result behind the
`.daisyui-fast` marker. Remove that file to rerun the installer.
{{end}}
Enjoy building with {{ .AppName }}!
